{"ast":null,"code":"import { actionTypes } from \"../actions/actionTypes\";\nconst initialState = {\n  cart: [],\n  totalPrice: 0,\n  cartProductId: [],\n\n  /** is to handle ADD_TO_CART and ADD_QTY */\n  viewCart: false,\n  set: []\n};\nexport const reducerCart = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      state = { ...state,\n        cart: [...state.cart, action.payload],\n        cartProductId: [...state.cartProductId, action.payload.id],\n        totalPrice: state.totalPrice + action.payload.price\n      };\n      return state;\n\n    case actionTypes.ADD_QTY:\n      state = { ...state,\n        state: [state.cart[action.cartIndex].qty += 1, state.cart[action.cartIndex].amount += action.price],\n        totalPrice: state.totalPrice + action.price\n      };\n      return state;\n\n    case actionTypes.MINUS_QTY:\n      state = { ...state,\n\n        /** if qty is less then 1 delet entire row \n         * else minus the qty and amount */\n        state: state.cart[action.cartIndex].qty === 1 ? state.cart.splice(action.cartIndex, 1) : [state.cart[action.cartIndex].qty -= 1, state.cart[action.cartIndex].amount -= action.price],\n        totalPrice: state.totalPrice - action.price\n        /** if product id not exist on \"cart\"\n         * remove product id from \"cartProductId\"\n         */\n\n      };\n      return state;\n\n    case actionTypes.DELETE_FROM_CART:\n      state = { ...state,\n        state: state.cart.splice(action.cartIndex, 1),\n        totalPrice: Math.round(state.totalPrice) - Math.round(action.amount)\n      };\n      return state;\n\n    case actionTypes.CLEAR_CART:\n      state = { ...state,\n        cart: [],\n        totalPrice: 0\n      };\n      return state;\n\n    case actionTypes.VIEW_CART:\n      state = { ...state,\n        viewCart: state.viewCart ? false : true\n      };\n      return state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/rajju/Sites/REACT-WEBSITES/lan-pasaa/src/components/reducers/reducerCart.js"],"names":["actionTypes","initialState","cart","totalPrice","cartProductId","viewCart","set","reducerCart","state","action","type","ADD_TO_CART","payload","id","price","ADD_QTY","cartIndex","qty","amount","MINUS_QTY","splice","DELETE_FROM_CART","Math","round","CLEAR_CART","VIEW_CART"],"mappings":"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","sourcesContent":["import { actionTypes } from \"../actions/actionTypes\";\n\nconst initialState = {\n  cart: [],\n  totalPrice: 0,\n  cartProductId: [],/** is to handle ADD_TO_CART and ADD_QTY */\n  viewCart: false,\n  set: []\n}\n\nexport const reducerCart = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      state = {\n        ...state,\n        cart: [...state.cart, action.payload],\n        cartProductId: [...state.cartProductId, action.payload.id],\n        totalPrice: state.totalPrice + action.payload.price\n      }\n      return state;\n    case actionTypes.ADD_QTY:\n      state = {\n        ...state,\n        state: [state.cart[action.cartIndex].qty += 1,\n        state.cart[action.cartIndex].amount += action.price],\n        totalPrice: state.totalPrice + action.price\n      }\n      return state;\n    case actionTypes.MINUS_QTY:\n      state = {\n        ...state,\n        /** if qty is less then 1 delet entire row \n         * else minus the qty and amount */\n        state: state.cart[action.cartIndex].qty === 1\n          ? state.cart.splice(action.cartIndex, 1)\n          : [state.cart[action.cartIndex].qty -= 1,\n          state.cart[action.cartIndex].amount -= action.price],\n        totalPrice: state.totalPrice - action.price,\n        /** if product id not exist on \"cart\"\n         * remove product id from \"cartProductId\"\n         */\n      }\n      return state;\n    case actionTypes.DELETE_FROM_CART:\n      state = {\n        ...state,\n        state: state.cart.splice(action.cartIndex, 1),\n        totalPrice: Math.round(state.totalPrice) - Math.round(action.amount)\n      }\n      return state;\n    case actionTypes.CLEAR_CART:\n      state = {\n        ...state,\n        cart: [],\n        totalPrice: 0,\n      }\n      return state;\n    case actionTypes.VIEW_CART:\n      state = {\n        ...state,\n        viewCart: state.viewCart ? false : true\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}